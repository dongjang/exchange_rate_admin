<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.BankMapper">

    <select id="getBankList" parameterType="BankSearchRequest" resultType="BankResponse">
        SELECT 
            b.id,
            b.name,
            b.bank_code as bankCode,
            b.currency_code as currencyCode,
            c.country_name as countryName,
            c.code_name as codeName
        FROM bank b
        LEFT JOIN country c ON b.currency_code = c.code
        <where>
            <if test="countryName != null and countryName != ''">
                AND c.country_name LIKE CONCAT('%', #{countryName}, '%')
            </if>
            <if test="bankName != null and bankName != ''">
                AND b.name LIKE CONCAT('%', #{bankName}, '%')
            </if>
        </where>
        <choose>
            <when test="sortOrder == 'countryName'">
                ORDER BY c.country_name ASC
            </when>
            <when test="sortOrder == 'bankName'">
                ORDER BY b.name ASC
            </when>
            <when test="sortOrder == 'latest'">
                ORDER BY b.id DESC
            </when>
            <when test="sortOrder == 'oldest'">
                ORDER BY b.id ASC
            </when>
            <otherwise>
                ORDER BY b.id DESC
            </otherwise>
        </choose>
        LIMIT #{size} OFFSET #{page}
    </select>

    <select id="getBankCount" parameterType="BankSearchRequest" resultType="int">
        SELECT COUNT(*)
        FROM bank b
        LEFT JOIN country c ON b.currency_code = c.code
        <where>
            <if test="countryName != null and countryName != ''">
                AND c.country_name LIKE CONCAT('%', #{countryName}, '%')
            </if>
            <if test="bankName != null and bankName != ''">
                AND b.name LIKE CONCAT('%', #{bankName}, '%')
            </if>
        </where>
    </select>

    <select id="getBankById" parameterType="long" resultType="Bank">
        SELECT 
            id,
            name,
            bank_code,
            currency_code
        FROM bank
        WHERE id = #{id}
    </select>

    <insert id="insertBank" parameterType="Bank">
        INSERT INTO bank (name, bank_code, currency_code)
        VALUES (#{name}, #{bankCode}, #{currencyCode})
    </insert>

    <update id="updateBank" parameterType="Bank">
        UPDATE bank
        SET name = #{name},
            currency_code = #{currencyCode}
        WHERE id = #{id}
    </update>

    <delete id="deleteBank" parameterType="long">
        DELETE FROM bank WHERE id = #{id}
    </delete>

    <select id="existsByBankCode" parameterType="string" resultType="boolean">
        SELECT COUNT(*) > 0 FROM bank WHERE bank_code = #{bankCode}
    </select>

</mapper>
