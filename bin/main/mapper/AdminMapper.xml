<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.AdminMapper">

    <!-- 관리자 검색 -->
    <select id="searchAdmins" parameterType="AdminSearchRequest" resultType="AdminResponse">
        SELECT 
            a.id,
            a.admin_id as adminId,
            a.name,
            a.email,
            a.role,
            a.status,
            a.last_login_at as lastLoginAt,
            a.created_at as createdAt,
            a.updated_at as updatedAt,
            COALESCE(ua.name, '-') as updatedAdminName
        FROM admin a
        LEFT JOIN admin ua ON a.updated_admin_id = ua.id
        <where>
            <if test="name != null and name != ''">
                AND a.name LIKE CONCAT('%', #{name}, '%')
            </if>
            <if test="adminId != null and adminId != ''">
                AND a.admin_id LIKE CONCAT('%', #{adminId}, '%')
            </if>
            <if test="email != null and email != ''">
                AND a.email LIKE CONCAT('%', #{email}, '%')
            </if>
            <if test="role != null and role != ''">
                AND a.role = #{role}
            </if>
            <if test="status != null and status != ''">
                AND a.status = #{status}
            </if>
        </where>
        <choose>
            <when test="sortOrder == 'name'">
                ORDER BY a.name
            </when>
            <when test="sortOrder == 'adminId'">
                ORDER BY a.admin_id
            </when>
            <when test="sortOrder == 'email'">
                ORDER BY a.email
            </when>
            <when test="sortOrder == 'role'">
                ORDER BY a.role
            </when>
            <when test="sortOrder == 'status'">
                ORDER BY a.status
            </when>
            <when test="sortOrder == 'lastLoginAt'">
                ORDER BY a.last_login_at DESC
            </when>
            <when test="sortOrder == 'createdAt'">
                ORDER BY a.created_at DESC
            </when>
            <otherwise>
                ORDER BY a.name
            </otherwise>
        </choose>
        LIMIT #{size} OFFSET #{page}
    </select>

    <!-- 관리자 검색 결과 개수 -->
    <select id="getAdminCount" parameterType="AdminSearchRequest" resultType="int">
        SELECT COUNT(*)
        FROM admin a
        <where>
            <if test="name != null and name != ''">
                AND a.name LIKE CONCAT('%', #{name}, '%')
            </if>
            <if test="adminId != null and adminId != ''">
                AND a.admin_id LIKE CONCAT('%', #{adminId}, '%')
            </if>
            <if test="email != null and email != ''">
                AND a.email LIKE CONCAT('%', #{email}, '%')
            </if>
            <if test="role != null and role != ''">
                AND a.role = #{role}
            </if>
            <if test="status != null and status != ''">
                AND a.status = #{status}
            </if>
        </where>
    </select>

    <!-- 특정 관리자 조회 -->
    <select id="getAdminById" parameterType="long" resultType="AdminResponse">
        SELECT 
            a.id,
            a.admin_id as adminId,
            a.name,
            a.email,
            a.role,
            a.status,
            a.last_login_at as lastLoginAt,
            a.created_at as createdAt,
            a.updated_at as updatedAt,
            COALESCE(ua.name, '-') as updatedAdminName
        FROM admin a
        LEFT JOIN admin ua ON a.updated_admin_id = ua.id
        WHERE a.id = #{id}
    </select>

    <!-- 관리자 등록 -->
    <insert id="insertAdmin" parameterType="AdminResponse">
        INSERT INTO admin (
            admin_id, password, name, email, role, status, 
            last_login_at, created_at, updated_at, updated_admin_id
        ) VALUES (
            #{adminId}, #{password}, #{name}, #{email}, #{role}, #{status},
            #{lastLoginAt}, NOW(), NOW(), #{updatedAdminId}
        )
    </insert>

    <!-- 관리자 수정 -->
    <update id="updateAdmin" parameterType="AdminResponse">
        UPDATE admin 
        SET 
            name = #{name},
            email = #{email},
            role = #{role},
            status = #{status},
            updated_at = NOW(),
            updated_admin_id = #{updatedAdminId}
            <if test="password != null and password != ''">
                , password = #{password}
            </if>
        WHERE id = #{id}
    </update>

    <!-- 관리자 상태 업데이트 -->
    <update id="updateAdminStatus">
        UPDATE admin 
        SET status = #{status}
        WHERE id = #{id}
    </update>

</mapper>
