spring:
  main:
    web-application-type: servlet  # 웹 애플리케이션 타입 명시적 설정 (ApplicationReadyEvent 발생을 위해 필요)
  datasource:
    # AWS RDS MySQL 연결 정보
    url: ${DB_URL}&serverTimezone=Asia/Seoul
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 3  # 무료 티어에 맞게 줄임
      minimum-idle: 1
      connection-timeout: 20000  # 타임아웃 줄임
      idle-timeout: 300000
      max-lifetime: 900000
      register-mbeans: true
      metrics-name: hikaricp
      pool-name: "ProductionDB-Pool"

  jpa:
    hibernate:
      ddl-auto: update  # 테이블 자동 생성/업데이트
    show-sql: false  # 무료 티어에서 성능 최적화
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.MySQLDialect
        jdbc:
          batch_size: 20
          time_zone: Asia/Seoul
        order_inserts: true
        order_updates: true

  data:
    redis:
      # EC2 Docker Redis 연결 정보
      host: redis
      port: 6379
      timeout: 500ms  # Redis 응답 대기 시간 단축
      # password: # AWS ElastiCache는 기본적으로 비밀번호 없음
      lettuce:
        pool:
          max-active: 3  # 무료 티어에 맞게 줄임
          max-idle: 2
          min-idle: 1
          max-wait: 1000ms  # 연결 풀 대기 시간 단축

  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 10MB
      file-size-threshold: 2KB

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${GMAIL_USERNAME}
    password: ${GMAIL_APP_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000
          debug: false  # 운영환경에서는 false

  cache:
    type: redis  # Redis 캐시 사용
    redis:
      time-to-live: 1800000  # 30분
      cache-null-values: false

  session:
    store-type: redis  # Redis 세션 저장 사용
    timeout: 30m  # 세션 타임아웃 30분
    redis:
      namespace: spring:session  # 세션 네임스페이스

# 파일 업로드 설정 (S3 연동)
file:
  upload:
    path: uploads
    s3:
      bucket-name: ${S3_BUCKET_NAME}
      region: ${AWS_REGION}

# Exchange API
exchange:
  api-key: ${EXCHANGE_API_KEY}

# 로깅 설정 (운영환경)
logging:
  level:
    com.example: INFO
    com.example.support.scheduler: INFO  # 스케줄러 로그 확인용
    org.springframework: WARN
    org.springframework.scheduling: INFO  # 스케줄링 관련 로그 확인용
    org.hibernate: WARN
    org.springframework.security: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: /app/logs/application.log
  # Docker 컨테이너에서 docker logs로 확인하기 위해 콘솔 출력 명시
  # Spring Boot 기본 동작: file.name 설정 시 파일과 콘솔 모두 출력

# CORS 설정
cors:
  allowed:
    origins: ${CORS_ALLOWED_ORIGINS}

# 애플리케이션 설정
server:
  port: 8080
  address: 0.0.0.0
  servlet:
    context-path: /
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
  tomcat:
    threads:
      max: 20
      min-spare: 5
    max-connections: 8192
    accept-count: 100
    connection-timeout: 20000

# 관리 엔드포인트 (운영환경에서는 제한적)
management:
  endpoints:
    web:
      exposure:
        include: info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      enabled: false  # Health Check 완전 비활성화
    prometheus:
      enabled: true
  health:
    mail:
      enabled: false  # Mail Health Check 비활성화
  server:
    port: 8080
  metrics:
    enable:
      hikaricp: true
    distribution:
      percentiles-histogram:
        "http.server.requests": true
        hikaricp.connections.creation: true
        hikaricp.connections.usage: true
      percentiles:
        "http.server.requests": 0.5, 0.95, 0.99
        hikaricp.connections.creation: 0.5, 0.95, 0.99
        hikaricp.connections.usage: 0.5, 0.95, 0.99
      slo:
        "http.server.requests": 10ms, 50ms, 100ms, 200ms, 500ms, 1s, 2s, 5s

